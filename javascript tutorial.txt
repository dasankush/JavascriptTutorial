*****GENERAL******

.length                                              //tells the length of a string or an array
function FuncionName(){statements;}                  //creates a function named 'FunctionName'
//localVariable has precedence over globalVariable
arrays are mutable
arrays and objects are mutable even if declared by keyword const
testing statment


********TEMPLATE LITERAL**********
    ``                      //is used to make a multi-line string with variables







******OBJECTS******

var testObj = {
    "name": 'jojo',
    "age": 2,
    "legs": 4
};                                                  //creates a object named 'testObj'



*****ACCESSING OBJECTS******

dot notation:
    var dogName = testObj.name;
    var dogAge = testObj.age;

bracket notation:
    var dogName = testObj["name"];
    var dogAge = testObj["age"];

using variables:
    var dogName = "name";
    var actualDogName = testObj[dogName];



******UPDATING OBJECT PROPERTIES*******

    var dogName = testObj.name = "jojo_inu";



******ADD NEW PROPERTY TO OBJECT******

    testObj["food"] = "chicken";



******DELETE A PROPERTY TO OBJECT******

    delete testObj.food;


******CHECK IF A OBJECT HAS A PROPERTY*******

    varObj.hasOwnProperty(checkProp)


******UNMUTATE OJECT****************
    Object.freeze(objName);


******GETTER AND SETTER TO CONTROL ACCESS OF A OBJECT******
    const person = {
        firstName: 'Mosh',
        lastName: 'Hamedani',   

        
        get fullName(value){
            return '${person.firstName} ${person.lastName}`
        },
        set fullName(value){
            const parts = value.split(' ');
            this.firstName = parts[0];
            this.lastName = parts[1];
        }
    };
    person.fullName = 'John Smith';
    console.log(person);




 
******LOOPS********

if(condition){if statements;}                        //if loop

if(condition){if statements;} 
    else{else statements;}                           //if else loop

if(condition){if statements;} 
    else if(condition){else if statements;}
    else{else statements;}                           //if else if loop

switch(var){
        case var: return var; break;
        case var2: return var2; break;
    }
    return default;                                  //switch statement












*****OPERATORS*****

==                           //equality operator
===                          //strict equality operator compares the data type as well
!=                           //inequality operator
!==                          //strict inequality operator
>                            //greater than operator
<                            //less than operator
>=                           //greater than or equal to operator
<=                           //less than or equal to operator
&&                           //Logical AND operator
||                           //Logical OR operator
? :                          //ternary operator
    (condition) ? if-true-statement : if-false-statement;
? : ? :                      //nested ternary operator
    condition ? true : condition2 ? true2 : false;



********REST OPERATOR**************
    function sum(...args){
        return args.reduce((a,b) => a+b, 0);
    }
    console.log(sum(1,2,3));



********SPREAD OPERATOR**************
    const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
    let arr2;
    (function(){
        arr2 = [...arr1];
        arr1[0] = 'potato'
    })();
    console.log(arr2); 



*********DESTRUCTURING ASSIGNMENT ****************
    const AVG_TEMPERATURES = {
        today: 77.5,
        tomorrow:79
    };
    function getTempOfTomorrow(avgTemperatures){
        "use strict";
        const { tomorrow : tempOfTomorrow } = avgTemperatures;
        return tempOfTomorrow;
    }
    console.log(getTempOfTomorrow(AVG_TEMPERATURES));



*********DESTRUCTURING ASSIGNMENT FROM NESTED OBJECTS****************
    const LCL21212_FORECAST = {
        today: {min: 72, max: 82},
        tomorrow: {min: 73, max: 84}
    };
    function getMaxOfTmrw(forecast) {
        "use strict";
        const { tomorrow : {max : maxOfTmrw } } = forecast;
        return maxOfTmrw;
    }
    console.log(getMaxOfTomorrow(LCL_FORECAST));




*********DESTRUCTURING ASSIGNMENT TO ASSIGN VARIABLES FROM ARRAYS****************
    const [z,x, ,y] = [1,2,3,4,5,6];
    console.log(z,x,y);
    let a = 8, b=6;
    (() => {
        "use strict";

    })();
    O/P:    1,2,4



*********DESTRUCTURING ASSIGNMENT TO ASSIGN OBJECTS AS PARAMETERS TO FUNCTION****************
    const stats = {
        max: 56.78,
        standard_deviation: 4.34,
        median: 34.54,
        mode: 23.87,
        min: -0.75,
        average: 35.85
    };
    const half = (function(){
        return function half({max, min}){
            return (min + max) / 2;
        };
    })();
    console.log(stats);
    console.log(half(stats));










*****ARROW FUNCTIONS*******

const magic = () => data();           //returns data to magic var without
                                        using function name.



*******FACTORY FUNCTIONS****************
    function createCircle(radius){
        return{
            radius,
            draw: function(){
                console.log('draw');
            }
        };
    }
    const circle = createCircle(1);
    circle.draw();


*****ARROW FUNCTIONS WITH PARAMETERS****************
    const myConcat = (arr1, arr2) => arr1.concat(arr2);
        console.log(myConcat([1,2], [3,4,5]));



*******OBJECT LITERAL DECLARATION USING SIMPLE FIELD********
BEFORE:
    const createPerson = (name, age, gender) =>
    {
        return{ 
            name: name,
            age: age,
            gender: gender
        };
    };
    console.log(createPerson("Zodiac Hasbro", 56, "male"));

AFTER:
     const createPerson = (name, age, gender) =>({ name, age, gender});
    console.log(createPerson("Zodiac Hasbro", 56, "male"));



********WRITE CONCISE DECLARATIVE FUNCTIONS********
    BEFORE:
        const bicycle = {
            gear: 2, 
            setGear: function(newGear){
                "use strict";
                this.gear = newGear;
            }
        };
        bicycle.setGear(3);
        console.log(bicycle.gear);
    AFTER:
         const bicycle = {
            gear: 2, 
            setGear(newGear){
                "use strict";
                this.gear = newGear;
            }
        };
        bicycle.setGear(3);
        console.log(bicycle.gear);



******USE CLASS SYNTAX TO DEFINE A CONSTRUCTOR FUNCTIONS****
    BEFORE:
        var SpaceShuttle = function(targetPlanet){
            this.targetPlanet = targetPlanet;
        }
        var zeus = new SpaceShuttle('Jupiter');
        console.log(zeus.targetPlanet);
    AFTER:
        class SpaceShuttle {
             constructor(targetPlanet){
            this.targetPlanet = targetPlanet;
            }
        }
        var zeus = new SpaceShuttle('Jupiter');
        console.log(zeus.targetPlanet);








*****BUILT-IN FUNCTIONS*******

unshift("")                           //add an element to the beginning of the array
shift("")                             //removes and stores first element from the array
push("")                              //add elements to the end of the array
pop("")                               //removes and stores last element from the array











******ADVANCED BUILT-IN FUNTIONS********

JSON.stringify(array)                 //converts array to string
parseInt(str, radix)                  //converts the string to the given radix
.filter(parameter => condition)       //filters all parameters according to condition
.map